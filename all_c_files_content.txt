// This is a basic Flutter widget test. // // To perform an interaction with a widget in your test, use the WidgetTester // utility in the flutter_test package. For example, you can send tap and scroll // gestures. You can also use WidgetTester to find child widgets in the widget // tree, read text, and verify that the values of widget properties are correct.  import 'package:flutter/material.dart'; import 'package:flutter_test/flutter_test.dart';  import 'package:ocare/main.dart';  void main() {   testWidgets('Counter increments smoke test', (WidgetTester tester) async {     // Build our app and trigger a frame.     await tester.pumpWidget(const MyApp());      // Verify that our counter starts at 0.     expect(find.text('0'), findsOneWidget);     expect(find.text('1'), findsNothing);      // Tap the '+' icon and trigger a frame.     await tester.tap(find.byIcon(Icons.add));     await tester.pump();      // Verify that our counter has incremented.     expect(find.text('0'), findsNothing);     expect(find.text('1'), findsOneWidget);   }); } class AppConfig {   static String kakaoNativeKey = 'b741f4bd2a49b2db18deac6923454964'; } // 이 파일은 .giti파일에 숨겨놓을것. import 'package:flutter/material.dart';  class AppColors {   static const backgroundColor = Color(0xfff7e10d); } // File generated by FlutterFire CLI. // ignore_for_file: type=lint import 'package:firebase_core/firebase_core.dart' show FirebaseOptions; import 'package:flutter/foundation.dart'     show defaultTargetPlatform, kIsWeb, TargetPlatform;  /// Default [FirebaseOptions] for use with your Firebase apps. /// /// Example: /// ```dart /// import 'firebase_options.dart'; /// // ... /// await Firebase.initializeApp( ///   options: DefaultFirebaseOptions.currentPlatform, /// ); /// ``` class DefaultFirebaseOptions {   static FirebaseOptions get currentPlatform {     if (kIsWeb) {       return web;     }     switch (defaultTargetPlatform) {       case TargetPlatform.android:         return android;       case TargetPlatform.iOS:         return ios;       case TargetPlatform.macOS:         return macos;       case TargetPlatform.windows:         return windows;       case TargetPlatform.linux:         throw UnsupportedError(           'DefaultFirebaseOptions have not been configured for linux - '           'you can reconfigure this by running the FlutterFire CLI again.',         );       default:         throw UnsupportedError(           'DefaultFirebaseOptions are not supported for this platform.',         );     }   }    static const FirebaseOptions web = FirebaseOptions(     apiKey: 'AIzaSyBdSk1d1yuF3mZCMMmKMH5wSpmzWUMKvaA',     appId: '1:481558429511:web:6042fa4b4e84161d661662',     messagingSenderId: '481558429511',     projectId: 'fir-test-bdb32',     authDomain: 'fir-test-bdb32.firebaseapp.com',     storageBucket: 'fir-test-bdb32.appspot.com',   );    static const FirebaseOptions android = FirebaseOptions(     apiKey: 'AIzaSyAddeTkrtODbQLPPAnQK15vjII-ixWfOsM',     appId: '1:481558429511:android:9c29114868ea3f2a661662',     messagingSenderId: '481558429511',     projectId: 'fir-test-bdb32',     storageBucket: 'fir-test-bdb32.appspot.com',   );    static const FirebaseOptions ios = FirebaseOptions(     apiKey: 'AIzaSyCZYRpL3KoXbdZNzaOmB-HTB-2e_m8yOXM',     appId: '1:481558429511:ios:e03bcc090bc28299661662',     messagingSenderId: '481558429511',     projectId: 'fir-test-bdb32',     storageBucket: 'fir-test-bdb32.appspot.com',     iosBundleId: 'com.example.ocare',   );    static const FirebaseOptions macos = FirebaseOptions(     apiKey: 'AIzaSyCZYRpL3KoXbdZNzaOmB-HTB-2e_m8yOXM',     appId: '1:481558429511:ios:0e1e9e3cbfb467a5661662',     messagingSenderId: '481558429511',     projectId: 'fir-test-bdb32',     storageBucket: 'fir-test-bdb32.appspot.com',     iosBundleId: 'com.example.kakaoLoginService',   );    static const FirebaseOptions windows = FirebaseOptions(     apiKey: 'AIzaSyBdSk1d1yuF3mZCMMmKMH5wSpmzWUMKvaA',     appId: '1:481558429511:web:43573c29f94ab5dd661662',     messagingSenderId: '481558429511',     projectId: 'fir-test-bdb32',     authDomain: 'fir-test-bdb32.firebaseapp.com',     storageBucket: 'fir-test-bdb32.appspot.com',   ); } import 'package:ocare/components/colors.dart'; import 'package:flutter/material.dart';  class ThemeProvider with ChangeNotifier {   bool _isDarkMode = false;    bool get isDarkMode => _isDarkMode;    Color get specialTextColor => _isDarkMode ? const Color(0xffE0E0E0) : Colors.black;   Color get bothTextColor => _isDarkMode ? const Color(0xffE0E0E0) : Colors.white;    ThemeData get lightTheme => ThemeData(         primaryColor: MyColors.primaryColor,         primarySwatch: MyColors.primaryMaterialColor,         scaffoldBackgroundColor: Colors.white,         textTheme: const TextTheme(           bodyMedium: TextStyle(color: Colors.black),         ),       );    ThemeData get darkTheme => ThemeData(         primaryColor: MyDarkColors.primaryColor,         primarySwatch: MyDarkColors.primaryMaterialColor,         scaffoldBackgroundColor: const Color(0xff333333),         textTheme: const TextTheme(           bodyMedium: TextStyle(color: Color(0xffE0E0E0)),         ),       );    void toggleTheme() {     _isDarkMode = !_isDarkMode;     notifyListeners();   } } import 'package:flutter/cupertino.dart';  class UserData extends ChangeNotifier {   String _name = '테스트님';   int _bloodPressure = 120;   int _bloodSugar = 70;    String get name => _name;    int get bloodPressure => _bloodPressure;    int get bloodSugar => _bloodSugar;    void updateUserData(String name, int bloodPressure, int bloodSugar) {     _name = name;     _bloodPressure = bloodPressure;     _bloodSugar = bloodSugar;     notifyListeners();   } } import 'package:flutter/material.dart';  class FontDefault {   static const bigFont = TextStyle(fontSize: 30, fontWeight: FontWeight.w600);   static const defaultFont =       TextStyle(fontSize: 15, fontWeight: FontWeight.w600); } class PickerItem {   final String id;   final String label;   final String? image;   bool checked = false;    PickerItem(this.id, this.label, this.image); } import 'package:flutter/material.dart'; import 'package:ocare/models/picker_item.dart';  class FriendPage extends StatefulWidget {   final List<PickerItem> items;    const FriendPage({required this.items, super.key});    @override   State<FriendPage> createState() => _FriendPageState(); }  class _FriendPageState extends State<FriendPage> {   @override   Widget build(BuildContext context) {     return Scaffold(       appBar: AppBar(         title: const Text('친구 선택'),         actions: [           GestureDetector(             onTap: () {               List<String> selectedItems = [];               for (var item in widget.items) {                 if (item.checked) {                   selectedItems.add(item.id);                 }               }               Navigator.of(context).pop(selectedItems);             },             child: const Padding(               padding: EdgeInsets.all(16.0),               child: Center(                 child: Text('OK'),               ),             ),           )         ],       ),       body: Padding(         padding: const EdgeInsets.all(8.0),         child: ListView.separated(             itemBuilder: (context, index) {               return ListTile(                 title: Text(widget.items[index].label),                 leading: widget.items[index].image != null &&                         widget.items[index].image != ''                     ? ClipRRect(                         borderRadius: BorderRadius.circular(8.0),                         child: Image.network(widget.items[index].image!,                             width: 56, height: 56),                       )                     : Container(                         decoration: BoxDecoration(                           color: Theme.of(context).primaryColor,                           borderRadius: BorderRadius.circular(8.0),                         ),                         width: 56,                         height: 56,                         child: const Icon(Icons.person)),                 trailing: Checkbox(                   value: widget.items[index].checked,                   onChanged: (value) {                     setState(() {                       widget.items[index].checked = value!;                     });                   },                 ),               );             },             separatorBuilder: (context, index) => const Divider(),             itemCount: widget.items.length),       ),     );   } } import 'package:flutter/foundation.dart';  class UserModel with ChangeNotifier {   final String name;   final String id;   final int age;   final int weight;   final String guardian;   final int systolic;   final int diastolic;   final int bloodSugar;   String nickname;   String email;   List<String>? friends;    UserModel({     required this.name,     required this.id,     required this.age,     required this.weight,     required this.guardian,     required this.systolic,     required this.diastolic,     required this.bloodSugar,     required this.nickname,     required this.email,     this.friends,   });   // Map 객체로부터 UserModel 객체를 생성하는 팩토리 생성자를 추가합니다.   factory UserModel.fromMap(Map<String, dynamic> map) {     return UserModel(       name: map['name'],       id: map['id'],       age: map['age'],       weight: map['weight'],       guardian: map['guardian'],       systolic: map['systolic'],       diastolic: map['diastolic'],       bloodSugar: map['bloodSugar'],       nickname: map['nickname'] ?? '', // null이면 빈 문자열을 기본값으로 사용       email: map['email'] ?? '', // null이면 빈 문자열을 기본값으로 사용       friends: List<String>.from(map['friends'] ?? []), // null이면 빈 리스트를 기본값으로 사용     );   }    Map<String, dynamic> toMap() {     return {       'name': name,       'id': id,       'age': age,       'weight': weight,       'guardian': guardian,       'systolic': systolic,       'diastolic': diastolic,       'bloodSugar': bloodSugar,       'nickname': nickname,       'email': email,       'friends': friends,     };   } }import 'package:flutter/material.dart'; import 'package:kakao_flutter_sdk/kakao_flutter_sdk.dart'; import 'package:ocare/constants/constants.dart'; import 'package:ocare/models/friend_kakao.dart'; import 'package:ocare/models/picker_item.dart'; import 'package:ocare/temple/temple.dart'; import 'package:ocare/utils/font_styles.dart'; import 'package:provider/provider.dart';  import 'package:ocare/models/user_model.dart'; class MainPage extends StatefulWidget {   const MainPage({super.key});    @override   State<MainPage> createState() => _MainPageState(); }  class _MainPageState extends State<MainPage> {   @override   Widget build(BuildContext context) {     final user = Provider.of<UserModel>(context);      return Scaffold(       backgroundColor: AppColors.backgroundColor,       appBar: AppBar(title: const Text('메인 페이지')),       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           crossAxisAlignment: CrossAxisAlignment.center,           children: [             Text(               'name: ${user.nickname}',               style: FontDefault.defaultFont,             ),             Text(               'email: ${user.email}',               style: FontDefault.defaultFont,             ),             ElevatedButton(               child: const Text('메시지 고!'),               onPressed: () async {                 // 카카오톡 친구 목록 가져오기                 Friends friends;                 try {                   friends = await TalkApi.instance.friends();                   print('카카오톡 친구 목록 가져오기 성공'                       '\n${friends.elements?.map((friend) => friend.profileNickname).join('\n')}');                 } catch (error) {                   print('카카오톡 친구 목록 가져오기 실패 $error');                   // 메시지를 보낼 수 있는 친구 정보 가져오기에 실패한 경우에 대한 예외 처리 필요                   return;                 }                  if (friends.elements == null) {                   // 메시지를 보낼 수 있는 친구가 없는 경우에 대한 예외 처리 필요                   return;                 }                  if (friends.elements!.isEmpty) {                   print('메시지를 보낼 친구가 없습니다 ${friends.elements}');                 } else {                   // 서비스에 상황에 맞게 메시지 보낼 친구의 UUID를 가져옵니다.                   // 이 예제에서는 친구 목록을 화면에 보여주고 체크박스로 선택된 친구들의 UUID를 수집하도록 구현했습니다.                   List<String> selectedItems = await Navigator.of(context).push(                     MaterialPageRoute(                       builder: (context) => FriendPage(                         items: friends.elements!                             .map((friend) => PickerItem(                                 friend.uuid,                                 friend.profileNickname ?? '',                                 friend.profileThumbnailImage))                             .toList(),                       ),                     ),                   );                    if (selectedItems.isEmpty) {                     // 메시지를 보낼 친구를 선택하지 않은 경우에 대한 예외 처리 필요                     return;                   }                   print('선택된 친구:\n${selectedItems.join('\n')}');                    // 메시지를 보낼 친구의 UUID 목록                   List<String> receiverUuids = selectedItems;                   setState(() {                     Provider.of<UserModel>(context, listen: false).friends =                         selectedItems;                   });                 }               },             ),             ElevatedButton(               onPressed: () async {                 List<String> receiverUuids = user.friends!;                 debugPrint("friend 메시지"); // 피드 메시지, 메시지 만들기 참고                 FeedTemplate template = defaultFeed;                  // 기본 템플릿으로 메시지 보내기                 try {                   MessageSendResult result =                       await TalkApi.instance.sendDefaultMessage(                     receiverUuids: receiverUuids,                     template: template,                   );                   print('메시지 보내기 성공 ${result.successfulReceiverUuids}');                    if (result.failureInfos != null) {                     print('일부 대상에게 메시지 보내기 실패'                         '\n${result.failureInfos}');                   }                 } catch (error) {                   print('메시지 보내기 실패 $error');                 }               },               child: const Text("친구"),             )           ],         ),       ),     );   } } import 'dart:async'; import 'package:ocare/components/colors.dart'; import 'package:ocare/router/app_router.dart';  import 'package:flutter/material.dart'; import 'package:go_router/go_router.dart';  class SplashScreen extends StatefulWidget {   const SplashScreen({super.key});    @override   State<SplashScreen> createState() => _SplashScreenState(); }  class _SplashScreenState extends State<SplashScreen> {   @override   void initState() {     super.initState();     Timer(       const Duration(seconds: 3),       () => context.pushReplacement(AppScreen.home),     );   }    @override   Widget build(BuildContext context) {     return Scaffold(       body: Column(         mainAxisAlignment: MainAxisAlignment.center,         children: [           const Expanded(             child: Center(               child: Column(                 mainAxisAlignment: MainAxisAlignment.center,                 crossAxisAlignment: CrossAxisAlignment.center,                 children: [                   Text(                     'Ocare',                     style: TextStyle(                       fontSize: 40,                       color: MyColors.primaryColor,                       fontFamily: 'Gmak',                       fontWeight: FontWeight.bold,                     ),                   ),                   SizedBox(height: 10),                   Text(                     '당신을 위한 건강 관리',                     style: TextStyle(                       fontSize: 15,                       color: MyColors.primaryColor,                       fontFamily: 'Gmak',                       fontWeight: FontWeight.w300,                     ),                   ),                 ],               ),             ),           ),           Padding(             padding: const EdgeInsets.only(bottom: 100.0),             child: SizedBox(               width: 33,               height: 33,               child: CircularProgressIndicator(                 valueColor: AlwaysStoppedAnimation<Color>(MyColors.primaryMaterialColor.shade600),                 strokeWidth: 5.0,               ),             ),           ),         ],       ),     );   } } import 'package:firebase_auth/firebase_auth.dart'; import 'package:ocare/widgets/app_bar.dart'; import 'package:flutter/material.dart'; import 'package:ocare/controllers/user_controller.dart'; import '../widgets/user_box.dart';  class ProfileScreen extends StatefulWidget {   const ProfileScreen({super.key});    @override   State<ProfileScreen> createState() => _ProfileScreenState(); }  class _ProfileScreenState extends State<ProfileScreen> {   final TextEditingController _nameController = TextEditingController();   final TextEditingController _idController = TextEditingController();   final TextEditingController _ageController = TextEditingController();   final TextEditingController _weightController = TextEditingController();   final TextEditingController _guardianController = TextEditingController();   final TextEditingController _systolicController = TextEditingController();   final TextEditingController _diastolicController = TextEditingController();   final TextEditingController _bloodSugarController = TextEditingController();    final UserController _userController = UserController();    @override   void initState() {     super.initState();   }    @override   void dispose() {     _nameController.dispose();     _idController.dispose();     _ageController.dispose();     _weightController.dispose();     _guardianController.dispose();     _systolicController.dispose();     _diastolicController.dispose();     _bloodSugarController.dispose();     super.dispose();   }    Future<void> _saveToFirestore() async {     final user = FirebaseAuth.instance.currentUser;     if (user != null) {       final userId = user.uid; // 현재 로그인한 사용자의 식별자 가져오기       await _userController.saveUserData(         userId, // 사용자 식별자 전달         _nameController.text,         _idController.text,         int.tryParse(_ageController.text) ?? 0,         int.tryParse(_weightController.text) ?? 0,         _guardianController.text,         int.tryParse(_systolicController.text) ?? 0,         int.tryParse(_diastolicController.text) ?? 0,         int.tryParse(_bloodSugarController.text) ?? 0,       );     }   }    @override   Widget build(BuildContext context) {     return Scaffold(       resizeToAvoidBottomInset: true,       body: SafeArea(         child: ListView(           // Column 대신 ListView 사용           padding: const EdgeInsets.all(25.0),           children: [             const AppbarWidget(title: '내 정보', size: 40.0),             UserBox(               nameController: _nameController,               idController: _idController,               ageController: _ageController,               weightController: _weightController,               guardianController: _guardianController,               systolicController: _systolicController,               diastolicController: _diastolicController,               bloodSugarController: _bloodSugarController,             ),             const SizedBox(height: 16.0),             _buildButtonSection(context),             _buildSettingsText(),             _buildPushNotificationSetting(),             _buildPrivacyAndMarketingSettings(),              const SizedBox(height: 80.0), // 바텀 패딩 추가           ],         ),       ),       floatingActionButton: FloatingActionButton(         onPressed: _saveToFirestore,         child: const Icon(Icons.save),       ),     );   }         Widget _buildButtonSection(BuildContext context) {     return Container(       padding: const EdgeInsets.all(16.0),       child: Row(         mainAxisAlignment: MainAxisAlignment.spaceEvenly,         children: [           // 통계 버튼           ElevatedButton(             onPressed: () {               // 통계 버튼 클릭 시 동작             },             child: const Text('통계'),           ),           // 캘린더 버튼           ElevatedButton(             onPressed: () {               // 캘린더 버튼 클릭 시 동작             },             child: const Text('캘린더'),           ),         ],       ),     );   }    Widget _buildSettingsText() {     return const Padding(       padding: EdgeInsets.symmetric(horizontal: 27.0),       child: Row(         mainAxisAlignment: MainAxisAlignment.spaceBetween,         children: [           Text(             '설정',             style: TextStyle(               fontSize: 50.0,             ),           ),         ],       ),     );   }    bool isSwitched = true; // 초기값을 true로 설정   Widget _buildPushNotificationSetting() {     return Padding(       padding: const EdgeInsets.symmetric(horizontal: 27.0),       child: Row(         mainAxisAlignment: MainAxisAlignment.spaceBetween,         children: [           const Text(             'Push 알림',             style: TextStyle(               fontSize: 20.0,             ),           ),           Switch(             value: isSwitched, // Switch 상태를 isSwitched 변수로 관리             onChanged: (value) {               setState(() {                 isSwitched = value; // Switch를 토글할 때 isSwitched의 값을 업데이트               });             },           ),         ],       ),     );   }    Widget _buildPrivacyAndMarketingSettings() {     return const Padding(       padding: EdgeInsets.symmetric(horizontal: 27.0),       child: ExpansionTile(         title: Text(           '개인정보 활용 및 마케팅 수신',           style: TextStyle(             fontSize: 20.0,           ),         ),         children: [           Padding(             padding: EdgeInsets.all(16.0),             child: Column(               crossAxisAlignment: CrossAxisAlignment.start,               children: [                 Text(                   '개인정보 활용 동의',                   style: TextStyle(                     fontSize: 16.0,                     fontWeight: FontWeight.bold,                   ),                 ),                 SizedBox(height: 8.0),                 Text(                   '서비스 제공을 위해 필수적인 개인정보 수집에 동의합니다.',                   style: TextStyle(                     fontSize: 14.0,                   ),                 ),                 SizedBox(height: 16.0),                 Text(                   '마케팅 수신 동의',                   style: TextStyle(                     fontSize: 16.0,                     fontWeight: FontWeight.bold,                   ),                 ),                 SizedBox(height: 8.0),                 Text(                   '이벤트 및 프로모션 정보를 수신하는 것에 동의합니다.',                   style: TextStyle(                     fontSize: 14.0,                   ),                 ),               ],             ),           ),         ],       ),     );   } } import 'package:firebase_auth/firebase_auth.dart'; import 'package:flutter/material.dart'; import 'package:kakao_flutter_sdk/kakao_flutter_sdk.dart'; import 'package:ocare/constants/constants.dart'; import 'package:ocare/screens/home_screen.dart'; import 'package:ocare/screens/main_page.dart'; import 'package:ocare/utils/font_styles.dart'; import 'package:provider/provider.dart';  import 'package:ocare/models/user_model.dart';  import '../controllers/user_controller.dart';  class LoginPage extends StatelessWidget {   const LoginPage({super.key});    Future<void> initLoginService(BuildContext context) async {     try {       var token = await UserApi.instance.loginWithKakaoTalk();       debugPrint('카카오 로그인 성공, 액세스 토큰: ${token.accessToken}');        var user = await UserApi.instance.me();        // 카카오 계정 정보로 Firebase Authentication에 계정 생성 또는 로그인       String email = user.kakaoAccount?.email ?? '';       String password = user.id.toString(); // 카카오 ID를 비밀번호 대용으로 사용       String displayName = user.kakaoAccount?.profile?.nickname ?? '';        try {         // Firebase Authentication에 계정 생성 또는 로그인 시도         UserCredential userCredential =         await FirebaseAuth.instance.createUserWithEmailAndPassword(           email: email,           password: password,         );          // 사용자 이름(닉네임) 설정         await userCredential.user?.updateDisplayName(displayName);          // UserController의 saveUserData 메서드 호출하여 사용자 정보 저장         final userController = UserController();         await userController.saveUserData(           user.id.toString(), // 사용자 식별자(카카오 ID)           displayName, // 사용자 이름           user.id.toString(), // 사용자 고유 식별자(카카오 ID)           0, // 나이 (필요한 경우 수정)           0, // 체중 (필요한 경우 수정)           '', // 보호자 (필요한 경우 수정)           0, // 수축기 혈압 (필요한 경우 수정)           0, // 이완기 혈압 (필요한 경우 수정)           0, // 혈당 (필요한 경우 수정)         );          // 로그인 성공 처리         Provider.of<UserModel>(context, listen: false).nickname = displayName;         Provider.of<UserModel>(context, listen: false).email = email;         Navigator.pushReplacement(             context, MaterialPageRoute(builder: (context) => const HomeScreen()));       } on FirebaseAuthException catch (e) {         if (e.code == 'email-already-in-use') {           // 이미 존재하는 이메일인 경우, 로그인 시도           await FirebaseAuth.instance.signInWithEmailAndPassword(             email: email,             password: password,           );            // 로그인 성공 처리           Provider.of<UserModel>(context, listen: false).nickname = displayName;           Provider.of<UserModel>(context, listen: false).email = email;           Navigator.pushReplacement(               context, MaterialPageRoute(builder: (context) => const HomeScreen()));         } else {           debugPrint('Firebase Authentication 에러: ${e.code}');           // 에러 처리 로직 추가         }       } catch (e) {         debugPrint('Firebase Authentication 에러: $e');         // 에러 처리 로직 추가       }     } catch (error) {       debugPrint('카카오 로그인 실패 $error');     }   }    @override   Widget build(BuildContext context) {     return Scaffold(       backgroundColor: AppColors.backgroundColor,       body: Center(         child: Column(           mainAxisAlignment: MainAxisAlignment.center,           children: [             const Text(               "Kakao Login",               style: FontDefault.bigFont,             ),             const SizedBox(               height: 20,             ),             ElevatedButton(               onPressed: () {                 initLoginService(context);               },               child: const Text(                 '카카오 연동하기',                 style: TextStyle(fontSize: 15),               ),             ),           ],         ),       ),     );   } } import 'package:ocare/widgets/app_bar.dart'; import 'package:flutter/material.dart';  class BusinessScreen extends StatelessWidget {   const BusinessScreen({super.key});    @override   Widget build(BuildContext context) {     return const Scaffold(       body: SafeArea(         child: Padding(           padding: EdgeInsets.all(25.0),           child: SingleChildScrollView(             child: Column(children: [               AppbarWidget(title: 'Ai'),             ]),           ),         ),       ),     );   } } import 'package:ocare/widgets/app_bar.dart'; import 'package:flutter/material.dart';  class HomeScreen extends StatelessWidget {   const HomeScreen({super.key});    @override   Widget build(BuildContext context) {     return Scaffold(       body: SafeArea(         child: Padding(           padding: const EdgeInsets.all(25.0),           child: SingleChildScrollView(             child: Column(               crossAxisAlignment: CrossAxisAlignment.stretch,               children: [                 const AppbarWidget(title: '홈'),                 const SizedBox(height: 20.0),                 _buildUserBox(),                 const SizedBox(height: 24.0),                 _buildHealthPositionBox(context),                 const SizedBox(height: 24.0),                 _buildRecentRecordBox(),               ],             ),           ),         ),       ),     );   }    Widget _buildUserBox() {     return Container(       padding: const EdgeInsets.all(27.0),       decoration: BoxDecoration(         color: const Color(0xFFEFEFEF),         borderRadius: BorderRadius.circular(26.0),         boxShadow: const [           BoxShadow(             color: Color(0x29000000),             blurRadius: 6.0,             offset: Offset(0, 3),           ),         ],       ),       child: Stack(         clipBehavior: Clip.none, // 패딩으로 인해 잘리는 부분이 있을 때 잘리지 않도록 설정         children: [           const IntrinsicHeight(             child: Row(               mainAxisAlignment: MainAxisAlignment.spaceBetween,               children: [                 Column(                   mainAxisSize: MainAxisSize.min,                   children: [                     Icon(                       Icons.person,                       color: Color(0xFF276AEE),                       size: 56.49,                     ),                     Text(                       '테스트님',                       style: TextStyle(fontSize: 20.0),                     ),                   ],                 ),                 SizedBox(                   width: 0,                 ),                 VerticalDivider(                   color: Colors.grey,                   thickness: 1.0,                   width: 32.0,                 ),                 SizedBox(                   width: 15,                 ),                 Expanded(                   child: Column(                     crossAxisAlignment: CrossAxisAlignment.start,                     children: [                       Row(                         mainAxisAlignment: MainAxisAlignment.start,                         children: [                           Text(                             '혈압',                             style: TextStyle(fontSize: 15.0),                           ),                           SizedBox(width: 4.0),                           Text(                             '120',                             style: TextStyle(                               fontSize: 25.0,                               fontWeight: FontWeight.bold,                             ),                           ),                           SizedBox(width: 8.0),                           Text(                             '혈당',                             style: TextStyle(fontSize: 15.0),                           ),                           SizedBox(width: 4.0),                           Text(                             '70',                             style: TextStyle(                               fontSize: 25.0,                               fontWeight: FontWeight.bold,                             ),                           ),                         ],                       ),                       SizedBox(height: 8.0),                       Text(                         '이런 음식이 좋아요!',                         style: TextStyle(fontSize: 17.0),                       ),                       Text(                         '당근, 호박, 고구마',                         style: TextStyle(                           fontSize: 15.0,                           color: Colors.grey,                         ),                       ),                       SizedBox(height: 8.0),                       Text(                         '이런 음식이 나빠요!',                         style: TextStyle(fontSize: 17.0),                       ),                       Text(                         '치킨, 햄버거',                         style: TextStyle(                           fontSize: 15,                           color: Colors.grey,                         ),                       ),                     ],                   ),                 ),               ],             ),           ),           Positioned(             right: -40,             top: 70.0, // 패딩만큼 위로 올려줌             child: Container(               width: 31,               height: 31,               decoration: BoxDecoration(                 color: const Color(0xCC888888),                 shape: BoxShape.circle,                 boxShadow: [                   BoxShadow(                     color: Colors.black.withOpacity(0.2),                     blurRadius: 6.0,                     offset: const Offset(0, 3),                   ),                 ],               ),               child: const Icon(                 Icons.arrow_forward,                 color: Colors.white,               ),             ),           ),         ],       ),     );   }    Widget _buildHealthPositionBox(BuildContext context) {     double progress = 0.8; // 초기 진행 비율은 30%로 설정     double screenWidth = MediaQuery.of(context).size.width;     double gaugeWidth = screenWidth * 0.8; // 화면 너비의 80%를 게이지 너비로 설정      return Container(       padding: const EdgeInsets.all(16.0),       decoration: BoxDecoration(         color: const Color(0xFFEFEFEF),         borderRadius: BorderRadius.circular(26.0),         boxShadow: const [           BoxShadow(             color: Color(0x29000000),             blurRadius: 6.0,             offset: Offset(0, 3),           ),         ],       ),       child: Column(         crossAxisAlignment: CrossAxisAlignment.start,         children: [           const Text(             '나의 건강 위치',             style: TextStyle(fontSize: 15),           ),           const SizedBox(height: 8.0),           const Row(             children: [               Text(                 '평균',                 style: TextStyle(fontSize: 30, color: Color(0xFF276AEE)),               ),               Text(                 '이에요',                 style: TextStyle(fontSize: 30),               ),             ],           ),           const SizedBox(height: 8.0),           Container(             height: 20,             decoration: BoxDecoration(               color: Colors.white,               borderRadius: BorderRadius.circular(26),               boxShadow: const [                 BoxShadow(                   color: Color(0x29000000),                   blurRadius: 6.0,                   offset: Offset(0, 3),                 ),               ],             ),             child: Row(               children: [                 Container(                   height: 20,                   width: gaugeWidth * progress, // 진행 비율과 화면 너비에 따라 너비 조절                   decoration: BoxDecoration(                     color: const Color(0xFF276AEE),                     borderRadius: BorderRadius.circular(26),                   ),                 ),               ],             ),           ),         ],       ),     );   }    Widget _buildRecentRecordBox() {     return Container(       padding: const EdgeInsets.all(16.0),       decoration: BoxDecoration(         color: const Color(0xFFEFEFEF),         borderRadius: BorderRadius.circular(10.0),         boxShadow: const [           BoxShadow(             color: Color(0x29000000),             blurRadius: 6.0,             offset: Offset(0, 3),           ),         ],       ),       child: Column(         crossAxisAlignment: CrossAxisAlignment.start,         children: [           const Text(             '나의 최근 기록',             style: TextStyle(fontSize: 15),           ),           const SizedBox(height: 8.0),           Row(             mainAxisAlignment: MainAxisAlignment.spaceBetween, // 이 줄을 추가합니다.             children: [               const Text(                 '2024.04.24',                 style: TextStyle(fontSize: 30.0),               ),               const SizedBox(width: 16.0),               Container(                 height: 30.0,                 width: 1.0,                 color: Colors.grey,               ),               const SizedBox(width: 16.0),               const Text(                 '15:30',                 style: TextStyle(fontSize: 30.0, color: Color(0xFF276AEE)),               ),             ],           ),         ],       ),     );   } } import 'package:firebase_auth/firebase_auth.dart'; import 'package:firebase_core/firebase_core.dart'; import 'package:flutter/material.dart'; import 'package:kakao_flutter_sdk/kakao_flutter_sdk.dart'; import 'package:ocare/config/app_config.dart'; import 'package:ocare/models/user_model.dart'; import 'package:ocare/provider/theme_provider.dart'; import 'package:ocare/router/app_router.dart';  import 'package:ocare/screens/login_page.dart';  import 'package:provider/provider.dart'; import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;   void main() async {   WidgetsFlutterBinding.ensureInitialized();   await Firebase.initializeApp();   KakaoSdk.init(nativeAppKey: AppConfig.kakaoNativeKey);    runApp(     MultiProvider(       providers: [         ChangeNotifierProvider(create: (_) => ThemeProvider()),         ChangeNotifierProvider(           create: (_) => UserModel(             name: '',             id: '',             age: 0,             weight: 0,             guardian: '',             systolic: 0,             diastolic: 0,             bloodSugar: 0,             nickname: '',             email: '',           ),         ),         // 다른 Provider들을 여기에 추가       ],       child: const MyApp(),     ),   ); }  class MyApp extends StatelessWidget {   const MyApp({super.key});    @override   Widget build(BuildContext context) {     return ChangeNotifierProvider(       create: (context) => UserModel(         name: '',         id: '',         age: 0,         weight: 0,         guardian: '',         systolic: 0,         diastolic: 0,         bloodSugar: 0,         nickname: '',         email: '',       ),       child: MaterialApp.router(         routerConfig: router,         builder: (context, child) {           return StreamBuilder<firebase_auth.User?>(             stream: FirebaseAuth.instance.authStateChanges(),             builder: (context, snapshot) {               if (snapshot.hasData) {                 // 사용자가 로그인한 상태                 return child!;               } else {                 // 사용자가 로그인하지 않은 상태                 return const LoginPage();               }             },           );         },       ),     );   } }import 'package:flutter/material.dart';  class MyColors {   static const int _primaryColorValue = 0xFF276AEE;   static const primaryColor = Color(_primaryColorValue);    static const MaterialColor primaryMaterialColor = MaterialColor(     _primaryColorValue,     <int, Color>{       50: Color(0xFFE3F2FD),       100: Color(0xFFBBDEFB),       200: Color(0xFF90CAF9),       300: Color(0xFF64B5F6),       400: Color(0xFF42A5F5),       500: Color(_primaryColorValue), // 주 색상       600: Color(0xFF007BFF), // Loading       700: Color(0xFF1976D2),       800: Color(0xFF1565C0),       900: Color(0xFF0D47A1),     },   ); }  class MyDarkColors {   static const int _primaryColorValue = 0xFF424242; // 적절한 어두운 회색   static const primaryColor = Color(_primaryColorValue);   static const MaterialColor primaryMaterialColor = MaterialColor(     _primaryColorValue,     <int, Color>{       50: Color(0xFFE8E8E8),       100: Color(0xFFD1D1D1),       200: Color(0xFFBBBBBB),       300: Color(0xFFA4A4A4),       400: Color(0xFF8E8E8E),       500: Color(_primaryColorValue),       600: Color(0xFF3E3E3E),       700: Color(0xFF383838),       800: Color(0xFF323232),       900: Color(0xFF262626),     },   ); } import '../models/user_model.dart'; import '../services/firestore_service.dart';     class UserController {   final FirestoreService _firestoreService = FirestoreService();    Future<void> saveUserData(       String userId, // 사용자 식별자 추가       String name,       String id,       int age,       int weight,       String guardian,       int systolic,       int diastolic,       int bloodSugar,       ) async {     final UserModel userModel = UserModel(       name: name,       id: id,       age: age,       weight: weight,       guardian: guardian,       systolic: systolic,       diastolic: diastolic,       bloodSugar: bloodSugar,       nickname: '',       email: '',     );      await _firestoreService.saveToFirestore(userId, userModel); // 사용자 식별자 전달   } } import 'package:kakao_flutter_sdk/kakao_flutter_sdk.dart';  final FeedTemplate defaultFeed = FeedTemplate(   content: Content(     title: '템플릿 만들어 보내기~ 업데이트~',     description: '#O케어 #플러터로 플러팅 #Flutter',     imageUrl: Uri.parse(         'https://mud-kage.kakao.com/dn/Q2iNx/btqgeRgV54P/VLdBs9cvyn8BJXB3o7N8UK/kakaolink40_original.png'),     link: Link(         webUrl: Uri.parse('https://developers.kakao.com'),         mobileWebUrl: Uri.parse('https://developers.kakao.com')),   ),   itemContent: ItemContent(     profileText: 'Kakao',     profileImageUrl: Uri.parse(         'https://mud-kage.kakao.com/dn/Q2iNx/btqgeRgV54P/VLdBs9cvyn8BJXB3o7N8UK/kakaolink40_original.png'),     titleImageUrl: Uri.parse(         'https://mud-kage.kakao.com/dn/Q2iNx/btqgeRgV54P/VLdBs9cvyn8BJXB3o7N8UK/kakaolink40_original.png'),     titleImageText: 'Cheese cake',     titleImageCategory: 'cake',     items: [       ItemInfo(item: 'cake1', itemOp: '1000원'),     ],     sum: 'total',     sumOp: '15000원',   ),   social: Social(likeCount: 286, commentCount: 45, sharedCount: 845),   buttons: [     Button(       title: '웹으로 보기',       link: Link(         webUrl: Uri.parse('https: //developers.kakao.com'),         mobileWebUrl: Uri.parse('https: //developers.kakao.com'),       ),     ),     Button(       title: '앱으로보기',       link: Link(         androidExecutionParams: {'key1': 'value1', 'key2': 'value2'},         iosExecutionParams: {'key1': 'value1', 'key2': 'value2'},       ),     ),   ], ); import 'package:cloud_firestore/cloud_firestore.dart';  import '../models/user_model.dart';  class FirestoreService {   final FirebaseFirestore _firestore = FirebaseFirestore.instance;    Future<void> saveToFirestore(String userId, UserModel userModel) async {     try {       await _firestore.collection('users').doc(userId).set(userModel.toMap()); // 사용자 식별자를 문서 ID로 사용     } catch (e) {       print('Failed to save data to Firestore: $e');     }   }      Future<UserModel?> getUserFromFirestore(String userId) async {     try {       final snapshot = await _firestore.collection('users').doc(userId).get();       if (snapshot.exists) {         return UserModel.fromMap(snapshot.data()!);       }     } catch (e) {       print('Failed to get user data from Firestore: $e');     }     return null;   } } import 'package:flutter/material.dart'; import 'text_field_with_controller.dart';  class UserBox extends StatelessWidget {   const UserBox({     super.key,     required this.nameController,     required this.idController,     required this.ageController,     required this.weightController,     required this.guardianController,     required this.systolicController,     required this.diastolicController,     required this.bloodSugarController,   });    final TextEditingController nameController;   final TextEditingController idController;   final TextEditingController ageController;   final TextEditingController weightController;   final TextEditingController guardianController;   final TextEditingController systolicController;   final TextEditingController diastolicController;   final TextEditingController bloodSugarController;    @override   Widget build(BuildContext context) {     // final double bottomNavBarHeight =     //     MediaQuery.of(context).padding.bottom + kBottomNavigationBarHeight;      return Container(       decoration: const BoxDecoration(           // color: Colors.grey[200],           // borderRadius: BorderRadius.circular(16.0),           ),       child: Column(         crossAxisAlignment: CrossAxisAlignment.start,         children: [           Row(             children: [               Expanded(                 child: TextFieldWithController(                   label: '이름',                   hintText: '이름을 입력하세요',                   controller: nameController,                 ),               ),               const SizedBox(width: 16.0),               Expanded(                 child: TextFieldWithController(                   label: '고유번호',                   hintText: '고유번호를 입력하세요',                   controller: idController,                 ),               ),             ],           ),           const SizedBox(height: 16.0),           Row(             children: [               Expanded(                 child: TextFieldWithController(                   label: '나이',                   hintText: '나이를 입력하세요',                   controller: ageController,                   keyboardType: TextInputType.number,                 ),               ),               const SizedBox(width: 16.0),               Expanded(                 child: TextFieldWithController(                   label: '체중',                   hintText: '체중을 입력하세요',                   controller: weightController,                   keyboardType: TextInputType.number,                 ),               ),             ],           ),           const SizedBox(height: 16.0),           TextFieldWithController(             label: '나의 보호자',             hintText: '보호자 이름을 입력하세요',             controller: guardianController,           ),           const SizedBox(height: 16.0),           Row(             children: [               Expanded(                 child: TextFieldWithController(                   label: '수축기',                   hintText: '수축기를 입력하세요',                   controller: systolicController,                   keyboardType: TextInputType.number,                 ),               ),               const SizedBox(width: 16.0),               Expanded(                 child: TextFieldWithController(                   label: '이완기',                   hintText: '이완기를 입력하세요',                   controller: diastolicController,                   keyboardType: TextInputType.number,                 ),               ),             ],           ),           const SizedBox(height: 16.0),           TextFieldWithController(             label: '혈당',             hintText: '혈당 수치를 입력하세요',             controller: bloodSugarController,             keyboardType: TextInputType.number,           ),         ],       ),     );   } } import 'package:flutter/material.dart';  class AppbarWidget extends StatelessWidget {   final String title;   final double size;    const AppbarWidget({     super.key,     required this.title,     this.size = 50.0,   });    @override   Widget build(BuildContext context) {     return Row(       mainAxisAlignment: MainAxisAlignment.spaceBetween,       children: [         Text(           title,           style: TextStyle(             fontSize: size,           ),         ),         const CircleAvatar(           backgroundColor: Color(0xFFEFEFEF),           radius: 22.5,           child: Icon(             Icons.notifications,             color: Color(0xFF8E8B8B),             size: 22.0,           ),         ),       ],     );   } } import 'package:flutter/material.dart';  class TextFieldWithController extends StatelessWidget {   const TextFieldWithController({     super.key,     required this.label,     required this.hintText,     required this.controller,     this.keyboardType = TextInputType.text,   });    final String label;   final String hintText;   final TextEditingController controller;   final TextInputType keyboardType;    @override   Widget build(BuildContext context) {     return Column(       crossAxisAlignment: CrossAxisAlignment.start,       children: [         Text(           label,           style: const TextStyle(             fontSize: 16.0,             fontWeight: FontWeight.bold,           ),         ),         const SizedBox(height: 8.0),         SizedBox(           width: 500,           height: 35,           child: TextField(             controller: controller,             keyboardType: keyboardType,              decoration: InputDecoration(               hintText: hintText,               border: OutlineInputBorder(                 borderRadius: BorderRadius.circular(10),               ),             ),           ),         ),       ],     );   } }import 'package:flutter/material.dart';  class CustomBottomNavigationBar extends StatelessWidget {   final int currentIndex;   final Function(int) onTap;    const CustomBottomNavigationBar({     super.key,     required this.currentIndex,     required this.onTap,   });    @override   Widget build(BuildContext context) {     return Row(       mainAxisAlignment: MainAxisAlignment.spaceEvenly,       children: [         _buildIcon(0, Icons.android_rounded),         _buildIcon(1, Icons.home_outlined),         _buildIcon(2, Icons.person_2_outlined),       ],     );   }    Widget _buildIcon(int index, IconData iconData) {     return Expanded(       child: InkWell(         onTap: () => onTap(index),         child: Icon(           iconData,           size: 30,           color: index == currentIndex ? Colors.white : Colors.white70,         ),       ),     );   } } // import 'package:flutter/material.dart';  // import '../navigation_state.dart'; // import '../screens/Home_screen.dart'; // import '../screens/business_screen.dart'; // import '../screens/profile_screen.dart';  // class BottomNavigationBarExample extends StatefulWidget { //   const BottomNavigationBarExample({super.key});  //   @override //   State<BottomNavigationBarExample> createState() => _BottomNavigationBarExampleState(); // }  // class _BottomNavigationBarExampleState extends State<BottomNavigationBarExample> { //   final NavigationState navigationState = NavigationState(); //   int _selectedIndex = 1;  //   @override //   Widget build(BuildContext context) { //     return Scaffold( //       body: Center( //         child: _buildWidgetOptions().elementAt(_selectedIndex), //       ), //       bottomNavigationBar: _bottomNavigationBar(), //     ); //   }  //   List<Widget> _buildWidgetOptions() { //     return [ //       BusinessScreen(navigationState: navigationState), //       HomeScreen(navigationState: navigationState), //       ProfileScreen(navigationState: navigationState), //     ]; //   }  //   void _onItemTapped(int index) { //     setState(() { //       _selectedIndex = index; //     }); //   }  //   Widget _bottomNavigationBar() { //     final double screenHeight = MediaQuery.of(context).size.height; //     final double screenWidth = MediaQuery.of(context).size.width;  //     final double verticalOffset = screenHeight * 0.1; // 상하 위치를 화면 높이의 10%로 조절 //     final double horizontalMargin = screenWidth * 0.15; // 좌우 마진을 화면 너비의 15%로 조절  //     return Transform.translate( //       offset: Offset(0.0, -verticalOffset), //       child: Container( //         margin: EdgeInsets.symmetric(horizontal: horizontalMargin), //         decoration: BoxDecoration( //           color: Colors.black, //           borderRadius: BorderRadius.circular(26.0),  //           // border: Border.all(color: const Color(0xFF707070), width: 1.0),  //           boxShadow: const [ //             BoxShadow( //               color: Colors.black, //               offset: Offset(0, 3), //               blurRadius: 6.0, //             ), //           ], //         ), //         child: ClipRRect( //           borderRadius: BorderRadius.circular(26.0), //           child: BottomNavigationBar( //             items: const <BottomNavigationBarItem>[ //               BottomNavigationBarItem( //                 icon: Icon(Icons.android), //                 label: '', //               ), //               BottomNavigationBarItem( //                 icon: Icon(Icons.home), //                 label: '', //               ), //               BottomNavigationBarItem( //                 icon: Icon(Icons.person), //                 label: '', //               ), //             ], //             currentIndex: _selectedIndex, //             selectedItemColor: const Color(0xFF276AEE), //             unselectedItemColor: Colors.white, //             onTap: _onItemTapped, //             showSelectedLabels: false, //             showUnselectedLabels: false, //             iconSize: 38, //             backgroundColor: const Color(0xFF276AEE), //           ), //         ), //       ), //     ); //   } // } import 'package:ocare/router/app_router.dart'; import 'package:ocare/widgets/bottom_nav.dart'; import 'package:flutter/material.dart'; import 'package:go_router/go_router.dart';  class BottomNavBar extends StatelessWidget {   final int currentIndex;   const BottomNavBar({super.key, required this.currentIndex});    @override   Widget build(BuildContext context) {     return BottomAppBar(       height: 85,       color: Colors.transparent,       elevation: 0,       child: SafeArea(         child: Container(           margin: const EdgeInsets.symmetric(horizontal: 40),           decoration: BoxDecoration(             color: Theme.of(context).primaryColor,             borderRadius: BorderRadius.circular(26),           ),           child: Padding(             padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 0),             child: CustomBottomNavigationBar(               currentIndex: currentIndex,               onTap: (int idx) => _onItemTapped(idx, context),             ),           ),         ),       ),     );   }    void _onItemTapped(int index, BuildContext context) {     switch (index) {       case 0:         context.go(AppScreen.business);         break;       case 1:         context.go(AppScreen.home);         break;       case 2:         context.go(AppScreen.profile);         break;     }   } }  import 'package:flutter/material.dart'; import 'package:go_router/go_router.dart';  import '../screens/business_screen.dart'; import '../screens/home_screen.dart'; import '../screens/profile_screen.dart'; import '../screens/splash/splash_page.dart'; import '../widgets/bottom_nav_bar.dart';  final router = GoRouter(   initialLocation: AppScreen.splash,   routes: [     GoRoute(       path: AppScreen.splash,       builder: (context, state) => const SplashScreen(),     ),     ShellRoute(       builder: (context, state, child) {         return Scaffold(           backgroundColor: Colors.transparent,           extendBody: true, // 바텀 네비게이션 바 뒤로 body를 추가           body: child,           bottomNavigationBar: BottomNavBar(             currentIndex: _calculateSelectedIndex(state.uri.toString()),           ),         );       },       routes: [         GoRoute(           path: AppScreen.business,           pageBuilder: (context, state) => NoTransitionPage(             key: state.pageKey,             child: const BusinessScreen(),           ),         ),         GoRoute(           path: AppScreen.home,           pageBuilder: (context, state) => NoTransitionPage(             key: state.pageKey,             child: const HomeScreen(),           ),         ),         GoRoute(           path: AppScreen.profile,           pageBuilder: (context, state) => NoTransitionPage(             key: state.pageKey,             child: const ProfileScreen(),           ),         ),       ],     ),   ],   errorBuilder: (context, state) => const Scaffold(     body: Center(       child: Text('Not found'),     ),   ),   debugLogDiagnostics: true, );  class AppScreen {   static String splash = '/splash';   static String home = '/home';   static String business = '/business';   static String profile = '/profile';   static String input = '/input'; }  int _calculateSelectedIndex(String location) {   return [AppScreen.business, AppScreen.home, AppScreen.profile].indexOf(location); } // // Generated file. Do not edit. // This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`. //  // @dart = 3.3  import 'dart:io'; // flutter_ignore: dart_io_import. import 'package:shared_preferences_android/shared_preferences_android.dart'; import 'package:webview_flutter_android/webview_flutter_android.dart'; import 'package:shared_preferences_foundation/shared_preferences_foundation.dart'; import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart'; import 'package:path_provider_linux/path_provider_linux.dart'; import 'package:shared_preferences_linux/shared_preferences_linux.dart'; import 'package:shared_preferences_foundation/shared_preferences_foundation.dart'; import 'package:path_provider_windows/path_provider_windows.dart'; import 'package:shared_preferences_windows/shared_preferences_windows.dart';  @pragma('vm:entry-point') class _PluginRegistrant {    @pragma('vm:entry-point')   static void register() {     if (Platform.isAndroid) {       try {         SharedPreferencesAndroid.registerWith();       } catch (err) {         print(           '`shared_preferences_android` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }        try {         AndroidWebViewPlatform.registerWith();       } catch (err) {         print(           '`webview_flutter_android` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }      } else if (Platform.isIOS) {       try {         SharedPreferencesFoundation.registerWith();       } catch (err) {         print(           '`shared_preferences_foundation` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }        try {         WebKitWebViewPlatform.registerWith();       } catch (err) {         print(           '`webview_flutter_wkwebview` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }      } else if (Platform.isLinux) {       try {         PathProviderLinux.registerWith();       } catch (err) {         print(           '`path_provider_linux` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }        try {         SharedPreferencesLinux.registerWith();       } catch (err) {         print(           '`shared_preferences_linux` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }      } else if (Platform.isMacOS) {       try {         SharedPreferencesFoundation.registerWith();       } catch (err) {         print(           '`shared_preferences_foundation` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }      } else if (Platform.isWindows) {       try {         PathProviderWindows.registerWith();       } catch (err) {         print(           '`path_provider_windows` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }        try {         SharedPreferencesWindows.registerWith();       } catch (err) {         print(           '`shared_preferences_windows` threw an error: $err. '           'The app may not function as expected until you remove this plugin from pubspec.yaml'         );       }      }   } } // Flutter web plugin registrant file. // // Generated file. Do not edit. //  // @dart = 2.13 // ignore_for_file: type=lint  import 'package:cloud_firestore_web/cloud_firestore_web.dart'; import 'package:firebase_app_check_web/firebase_app_check_web.dart'; import 'package:firebase_auth_web/firebase_auth_web.dart'; import 'package:firebase_core_web/firebase_core_web.dart'; import 'package:kakao_flutter_sdk_common/src/web/kakao_flutter_sdk_plugin.dart'; import 'package:shared_preferences_web/shared_preferences_web.dart'; import 'package:flutter_web_plugins/flutter_web_plugins.dart';  void registerPlugins([final Registrar? pluginRegistrar]) {   final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;   FirebaseFirestoreWeb.registerWith(registrar);   FirebaseAppCheckWeb.registerWith(registrar);   FirebaseAuthWeb.registerWith(registrar);   FirebaseCoreWeb.registerWith(registrar);   KakaoFlutterSdkPlugin.registerWith(registrar);   SharedPreferencesPlugin.registerWith(registrar);   registrar.registerMessageHandler(); } 